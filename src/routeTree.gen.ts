/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as UnauthenticatedImport } from './routes/_unauthenticated'
import { Route as IndexImport } from './routes/index'
import { Route as VacanciesIndexImport } from './routes/vacancies/index'
import { Route as ErrorIndexImport } from './routes/error/index'
import { Route as UnauthenticatedProfileImport } from './routes/_unauthenticated.profile'
import { Route as VacanciesVacancyIdIndexImport } from './routes/vacancies/$vacancyId/index'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const UnauthenticatedRoute = UnauthenticatedImport.update({
  id: '/_unauthenticated',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const VacanciesIndexRoute = VacanciesIndexImport.update({
  id: '/vacancies/',
  path: '/vacancies/',
  getParentRoute: () => rootRoute,
} as any)

const ErrorIndexRoute = ErrorIndexImport.update({
  id: '/error/',
  path: '/error/',
  getParentRoute: () => rootRoute,
} as any)

const UnauthenticatedProfileRoute = UnauthenticatedProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => UnauthenticatedRoute,
} as any)

const VacanciesVacancyIdIndexRoute = VacanciesVacancyIdIndexImport.update({
  id: '/vacancies/$vacancyId/',
  path: '/vacancies/$vacancyId/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_unauthenticated': {
      id: '/_unauthenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof UnauthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/_unauthenticated/profile': {
      id: '/_unauthenticated/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof UnauthenticatedProfileImport
      parentRoute: typeof UnauthenticatedImport
    }
    '/error/': {
      id: '/error/'
      path: '/error'
      fullPath: '/error'
      preLoaderRoute: typeof ErrorIndexImport
      parentRoute: typeof rootRoute
    }
    '/vacancies/': {
      id: '/vacancies/'
      path: '/vacancies'
      fullPath: '/vacancies'
      preLoaderRoute: typeof VacanciesIndexImport
      parentRoute: typeof rootRoute
    }
    '/vacancies/$vacancyId/': {
      id: '/vacancies/$vacancyId/'
      path: '/vacancies/$vacancyId'
      fullPath: '/vacancies/$vacancyId'
      preLoaderRoute: typeof VacanciesVacancyIdIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface UnauthenticatedRouteChildren {
  UnauthenticatedProfileRoute: typeof UnauthenticatedProfileRoute
}

const UnauthenticatedRouteChildren: UnauthenticatedRouteChildren = {
  UnauthenticatedProfileRoute: UnauthenticatedProfileRoute,
}

const UnauthenticatedRouteWithChildren = UnauthenticatedRoute._addFileChildren(
  UnauthenticatedRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof UnauthenticatedRouteWithChildren
  '/login': typeof LoginRoute
  '/profile': typeof UnauthenticatedProfileRoute
  '/error': typeof ErrorIndexRoute
  '/vacancies': typeof VacanciesIndexRoute
  '/vacancies/$vacancyId': typeof VacanciesVacancyIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof UnauthenticatedRouteWithChildren
  '/login': typeof LoginRoute
  '/profile': typeof UnauthenticatedProfileRoute
  '/error': typeof ErrorIndexRoute
  '/vacancies': typeof VacanciesIndexRoute
  '/vacancies/$vacancyId': typeof VacanciesVacancyIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_unauthenticated': typeof UnauthenticatedRouteWithChildren
  '/login': typeof LoginRoute
  '/_unauthenticated/profile': typeof UnauthenticatedProfileRoute
  '/error/': typeof ErrorIndexRoute
  '/vacancies/': typeof VacanciesIndexRoute
  '/vacancies/$vacancyId/': typeof VacanciesVacancyIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/login'
    | '/profile'
    | '/error'
    | '/vacancies'
    | '/vacancies/$vacancyId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/login'
    | '/profile'
    | '/error'
    | '/vacancies'
    | '/vacancies/$vacancyId'
  id:
    | '__root__'
    | '/'
    | '/_unauthenticated'
    | '/login'
    | '/_unauthenticated/profile'
    | '/error/'
    | '/vacancies/'
    | '/vacancies/$vacancyId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  UnauthenticatedRoute: typeof UnauthenticatedRouteWithChildren
  LoginRoute: typeof LoginRoute
  ErrorIndexRoute: typeof ErrorIndexRoute
  VacanciesIndexRoute: typeof VacanciesIndexRoute
  VacanciesVacancyIdIndexRoute: typeof VacanciesVacancyIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  UnauthenticatedRoute: UnauthenticatedRouteWithChildren,
  LoginRoute: LoginRoute,
  ErrorIndexRoute: ErrorIndexRoute,
  VacanciesIndexRoute: VacanciesIndexRoute,
  VacanciesVacancyIdIndexRoute: VacanciesVacancyIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_unauthenticated",
        "/login",
        "/error/",
        "/vacancies/",
        "/vacancies/$vacancyId/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_unauthenticated": {
      "filePath": "_unauthenticated.tsx",
      "children": [
        "/_unauthenticated/profile"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_unauthenticated/profile": {
      "filePath": "_unauthenticated.profile.tsx",
      "parent": "/_unauthenticated"
    },
    "/error/": {
      "filePath": "error/index.tsx"
    },
    "/vacancies/": {
      "filePath": "vacancies/index.tsx"
    },
    "/vacancies/$vacancyId/": {
      "filePath": "vacancies/$vacancyId/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
